// Code generated by sqlc. DO NOT EDIT.
// source: get_post_with_label_chronological.sql

package search_queries

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const getPostsPageWithPostLabelChronological = `-- name: GetPostsPageWithPostLabelChronological :many
WITH labeled_posts AS (
    SELECT p.id,
        p.text,
        p.parent_post_id,
        p.root_post_id,
        p.author_did,
        p.created_at,
        p.has_embedded_media,
        p.parent_relationship,
        p.sentiment,
        p.sentiment_confidence
    FROM posts p
        JOIN post_labels l ON p.id = l.post_id
    WHERE l.label = $1
        AND p.created_at < $2
    ORDER BY p.created_at DESC
    LIMIT $3
)
SELECT lp.id, lp.text, lp.parent_post_id, lp.root_post_id, lp.author_did, lp.created_at, lp.has_embedded_media, lp.parent_relationship, lp.sentiment, lp.sentiment_confidence,
    (
        SELECT json_agg(l.label) FILTER (
                WHERE l.label IS NOT NULL
            )
        FROM post_labels l
        WHERE l.post_id = lp.id
    ) AS labels
FROM labeled_posts lp
`

type GetPostsPageWithPostLabelChronologicalParams struct {
	Label     string    `json:"label"`
	CreatedAt time.Time `json:"created_at"`
	Limit     int32     `json:"limit"`
}

type GetPostsPageWithPostLabelChronologicalRow struct {
	ID                  string          `json:"id"`
	Text                string          `json:"text"`
	ParentPostID        sql.NullString  `json:"parent_post_id"`
	RootPostID          sql.NullString  `json:"root_post_id"`
	AuthorDid           string          `json:"author_did"`
	CreatedAt           time.Time       `json:"created_at"`
	HasEmbeddedMedia    bool            `json:"has_embedded_media"`
	ParentRelationship  sql.NullString  `json:"parent_relationship"`
	Sentiment           sql.NullString  `json:"sentiment"`
	SentimentConfidence sql.NullFloat64 `json:"sentiment_confidence"`
	Labels              json.RawMessage `json:"labels"`
}

func (q *Queries) GetPostsPageWithPostLabelChronological(ctx context.Context, arg GetPostsPageWithPostLabelChronologicalParams) ([]GetPostsPageWithPostLabelChronologicalRow, error) {
	rows, err := q.query(ctx, q.getPostsPageWithPostLabelChronologicalStmt, getPostsPageWithPostLabelChronological, arg.Label, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsPageWithPostLabelChronologicalRow
	for rows.Next() {
		var i GetPostsPageWithPostLabelChronologicalRow
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.ParentPostID,
			&i.RootPostID,
			&i.AuthorDid,
			&i.CreatedAt,
			&i.HasEmbeddedMedia,
			&i.ParentRelationship,
			&i.Sentiment,
			&i.SentimentConfidence,
			&i.Labels,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
